<template>
  <Element
    w="$width"
    h="$height"
    :color="$backgroundColor"
    @click="$handleClick"
  >
    <Text
      :content="$label"
      :color="$textColor"
      x="$textX"
      y="$textY"
    />
  </Element>
</template>

<script lang="ts">
import type { Point } from '@/utils/math';
import { MathUtils } from '../utils/math';

export interface ButtonProps {
  label: string;
  width?: number;
  height?: number;
  position?: Point;
}

export default {
  props: ['label', 'width', 'height', 'position'] as const,

  state(): {
    isPressed: boolean;
    clickCount: number;
    calculatedValue: number | null;
  } {
    return {
      isPressed: false,
      clickCount: 0,
      calculatedValue: null
    };
  },

  computed: {
    backgroundColor(): string {
      return this.isPressed ? '#0066cc' : '#007fff';
    },

    textColor(): string {
      return '#ffffff';
    },

    textX(): number {
      return Math.round(this.width / 2);
    },

    textY(): number {
      return Math.round(this.height / 2);
    }
  },

  methods: {
    async handleClick(): Promise<void> {
      this.isPressed = true;
      this.clickCount++;

      // Test Math object and async/await
      try {
        this.calculatedValue = await MathUtils.calculateAsync(this.clickCount);

        // Test path alias import
        if (this.position) {
          const distance = MathUtils.distance(
            this.position,
            MathUtils.createPoint(0, 0)
          );
          console.log(`Distance from origin: ${distance}`);
        }
      } catch (error: unknown) {
        console.error('Calculation failed:', error);
      } finally {
        setTimeout(() => {
          this.isPressed = false;
        }, 150);
      }
    },

    getTypedPosition(): Point | undefined {
      return this.position;
    }
  }
};
</script>
